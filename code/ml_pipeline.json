{
  "pipelineSpec": {
    "components": {
      "comp-condition-deploy-model-1": {
        "dag": {
          "tasks": {
            "deploy-model": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-deploy-model"
              },
              "inputs": {
                "artifacts": {
                  "model": {
                    "componentInputArtifact": "pipelineparam--model-training-model"
                  }
                },
                "parameters": {
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "region": {
                    "componentInputParameter": "pipelineparam--region"
                  },
                  "serving_container_image_uri": {
                    "componentInputParameter": "pipelineparam--serving_container_image_uri"
                  }
                }
              },
              "taskInfo": {
                "name": "deploy-model"
              }
            }
          }
        },
        "inputDefinitions": {
          "artifacts": {
            "pipelineparam--model-training-model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "pipelineparam--model-evaluation-deploy": {
              "type": "STRING"
            },
            "pipelineparam--project": {
              "type": "STRING"
            },
            "pipelineparam--region": {
              "type": "STRING"
            },
            "pipelineparam--serving_container_image_uri": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-deploy-model": {
        "executorLabel": "exec-deploy-model",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "project": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            },
            "serving_container_image_uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "vertex_endpoint": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "vertex_model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-get-data": {
        "executorLabel": "exec-get-data",
        "inputDefinitions": {
          "parameters": {
            "url": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset_test": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "dataset_train": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-model-evaluation": {
        "executorLabel": "exec-model-evaluation",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            },
            "test_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "target": {
              "type": "STRING"
            },
            "thresholds_dict_str": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "kpi": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "deploy": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-training": {
        "executorLabel": "exec-model-training",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "target": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-deploy-model": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "deploy_model"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'pandas' 'pyarrow' 'scikit-learn==1.0.0' 'gcsfs' 'kfp' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef deploy_model(\n    model: Input[Model],\n    project: str,\n    region: str,\n    serving_container_image_uri : str, \n    vertex_endpoint: Output[Artifact],\n    vertex_model: Output[Model]\n):\n    from google.cloud import aiplatform\n    aiplatform.init(project=project, location=region)\n\n    DISPLAY_NAME  = \"test\"\n    MODEL_NAME = \"test-ridge\"\n    ENDPOINT_NAME = \"test_endpoint\"\n\n    def create_endpoint():\n        endpoints = aiplatform.Endpoint.list(\n        filter='display_name=\"{}\"'.format(ENDPOINT_NAME),\n        order_by='create_time desc',\n        project=project, \n        location=region,\n        )\n        if len(endpoints) > 0:\n            endpoint = endpoints[0]  # most recently created\n        else:\n            endpoint = aiplatform.Endpoint.create(\n            display_name=ENDPOINT_NAME, project=project, location=region\n        )\n    endpoint = create_endpoint()   \n\n\n    #Import a model programmatically\n    model_upload = aiplatform.Model.upload(\n        display_name = DISPLAY_NAME, \n        artifact_uri = model.uri[:-5], #.replace(\"model\", \"\"),\n        serving_container_image_uri =  serving_container_image_uri,\n        serving_container_health_route=f\"/v1/models/{MODEL_NAME}\",\n        serving_container_predict_route=f\"/v1/models/{MODEL_NAME}:predict\",\n        serving_container_environment_variables={\n        \"MODEL_NAME\": MODEL_NAME,\n    },       \n    )\n    model_deploy = model_upload.deploy(\n        machine_type=\"n1-standard-4\", \n        endpoint=endpoint,\n        traffic_split={\"0\": 100},\n        deployed_model_display_name=DISPLAY_NAME,\n    )\n\n    # Save data to the output params\n    vertex_model.uri = model_deploy.resource_name\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-get-data": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "get_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'pyarrow' 'scikit-learn==1.0.0' 'gcsfs' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef get_data(\n    url: str,\n    dataset_train: Output[Dataset],\n    dataset_test: Output[Dataset]\n):\n    import pandas as pd\n    import numpy as np\n\n    train, test = pd.read_csv(url + 'train.csv', sep=';'), pd.read_csv(url + 'test.csv', sep=';')\n    train.to_csv(dataset_train.path + \".csv\" , sep=';',index=False, encoding='utf-8-sig')\n    test.to_csv(dataset_test.path + \".csv\" , sep=';',index=False, encoding='utf-8-sig')\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-model-evaluation": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_evaluation"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'pyarrow' 'scikit-learn==1.0.0' 'gcsfs' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_evaluation(\n    target : str,\n    test_set:  Input[Dataset],\n    model: Input[Model],\n    thresholds_dict_str: str,\n    kpi: Output[Metrics]\n) -> NamedTuple(\"output\", [(\"deploy\", str)]):\n\n    #from sklearn.linear_model import Ridge\n    import pandas as pd\n    import logging \n    import pickle\n    from sklearn.metrics import r2_score\n    import json\n    import typing\n\n\n    def threshold_check(val1, val2):\n        cond = \"false\"\n        if val1 >= val2 :\n            cond = \"true\"\n        return cond\n\n    data = pd.read_csv(test_set.path+\".csv\", sep = ';')\n    file_name = model.path + \".pkl\"\n    with open(file_name, 'rb') as file:  \n        model_reg = pickle.load(file)\n\n    y_test = data.drop(columns=target)\n    y_target=data[target]\n    y_pred = model_reg.predict(y_test)\n\n    R2 = r2_score(y_target, y_pred)\n    thresholds_dict = json.loads(thresholds_dict_str)\n    model.metadata[\"R2\"] = float(R2)\n    kpi.log_metric(\"R2\", float(R2))\n    deploy = threshold_check(float(R2), int(thresholds_dict['R2']))\n    return (deploy,)\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-model-training": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_training"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'pyarrow' 'scikit-learn==1.0.0' 'gcsfs' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_training(\n    target: str,\n    dataset:  Input[Dataset],\n    model: Output[Model], \n):\n\n    from sklearn.linear_model import Ridge\n    import pandas as pd\n    import pickle\n\n    data = pd.read_csv(dataset.path+\".csv\", sep=';')\n    print(data.columns)\n    model_reg = Ridge(alpha= 102 ,positive = True)\n    model_reg.fit(\n        data.drop(columns=target),\n        data[target]\n    )\n\n    model.metadata[\"framework\"] = \"Ridge\"\n    file_name = model.path + f\".pkl\"\n    with open(file_name, 'wb') as file:  \n        pickle.dump(model_reg, file)\n\n"
            ],
            "image": "python:3.9"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "pipeline-test"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "model-evaluation-kpi": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "kpi",
                  "producerSubtask": "model-evaluation"
                }
              ]
            }
          }
        },
        "tasks": {
          "condition-deploy-model-1": {
            "componentRef": {
              "name": "comp-condition-deploy-model-1"
            },
            "dependentTasks": [
              "model-evaluation",
              "model-training"
            ],
            "inputs": {
              "artifacts": {
                "pipelineparam--model-training-model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "model-training"
                  }
                }
              },
              "parameters": {
                "pipelineparam--model-evaluation-deploy": {
                  "taskOutputParameter": {
                    "outputParameterKey": "deploy",
                    "producerTask": "model-evaluation"
                  }
                },
                "pipelineparam--project": {
                  "componentInputParameter": "project"
                },
                "pipelineparam--region": {
                  "componentInputParameter": "region"
                },
                "pipelineparam--serving_container_image_uri": {
                  "componentInputParameter": "serving_container_image_uri"
                }
              }
            },
            "taskInfo": {
              "name": "condition-deploy-model-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--model-evaluation-deploy'].string_value == 'true'"
            }
          },
          "get-data": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-get-data"
            },
            "inputs": {
              "parameters": {
                "url": {
                  "componentInputParameter": "url"
                }
              }
            },
            "taskInfo": {
              "name": "get-data"
            }
          },
          "model-evaluation": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-model-evaluation"
            },
            "dependentTasks": [
              "get-data",
              "model-training"
            ],
            "inputs": {
              "artifacts": {
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "model-training"
                  }
                },
                "test_set": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset_test",
                    "producerTask": "get-data"
                  }
                }
              },
              "parameters": {
                "target": {
                  "componentInputParameter": "target"
                },
                "thresholds_dict_str": {
                  "componentInputParameter": "thresholds_dict_str"
                }
              }
            },
            "taskInfo": {
              "name": "model-evaluation"
            }
          },
          "model-training": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-model-training"
            },
            "dependentTasks": [
              "get-data"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset_train",
                    "producerTask": "get-data"
                  }
                }
              },
              "parameters": {
                "target": {
                  "componentInputParameter": "target"
                }
              }
            },
            "taskInfo": {
              "name": "model-training"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "api_endpoint": {
            "type": "STRING"
          },
          "display_name": {
            "type": "STRING"
          },
          "project": {
            "type": "STRING"
          },
          "region": {
            "type": "STRING"
          },
          "serving_container_image_uri": {
            "type": "STRING"
          },
          "target": {
            "type": "STRING"
          },
          "thresholds_dict_str": {
            "type": "STRING"
          },
          "url": {
            "type": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model-evaluation-kpi": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.11"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://plexiform-shine-343113-bucket-test/pipeline_root/",
    "parameters": {
      "api_endpoint": {
        "stringValue": "europe-west1-aiplatform.googleapis.com"
      },
      "display_name": {
        "stringValue": "pipeline-test-job20220309213041"
      },
      "project": {
        "stringValue": "plexiform-shine-343113"
      },
      "region": {
        "stringValue": "europe-west1"
      },
      "serving_container_image_uri": {
        "stringValue": "europe-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.0-24:latest"
      },
      "target": {
        "stringValue": "target"
      },
      "thresholds_dict_str": {
        "stringValue": "{\"R2\":0.45}"
      },
      "url": {
        "stringValue": "gs://plexiform-shine-343113-bucket-test/data/"
      }
    }
  }
}