name: Model evaluation
inputs:
- {name: target, type: String}
- {name: test_set, type: Dataset}
- {name: model, type: Model}
- {name: thresholds_dict_str, type: String}
outputs:
- {name: kpi, type: Metrics}
- {name: deploy, type: String}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'pyarrow' 'scikit-learn==1.0.0' 'gcsfs' 'kfp==1.8.11' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef model_evaluation(\n    target : str,\n    test_set:  Input[Dataset],\n\
      \    model: Input[Model],\n    thresholds_dict_str: str,\n    kpi: Output[Metrics]\n\
      ) -> NamedTuple(\"output\", [(\"deploy\", str)]):\n\n    #from sklearn.linear_model\
      \ import Ridge\n    import pandas as pd\n    import logging \n    import pickle\n\
      \    from sklearn.metrics import r2_score\n    import json\n    import typing\n\
      \n\n    def threshold_check(val1, val2):\n        cond = \"false\"\n       \
      \ if val1 >= val2 :\n            cond = \"true\"\n        return cond\n\n  \
      \  data = pd.read_csv(test_set.path+\".csv\", sep = ';')\n    file_name = model.path\
      \ + \".pkl\"\n    with open(file_name, 'rb') as file:  \n        model_reg =\
      \ pickle.load(file)\n\n    y_test = data.drop(columns=target)\n    y_target=data[target]\n\
      \    y_pred = model_reg.predict(y_test)\n\n    R2 = r2_score(y_target, y_pred)\n\
      \    thresholds_dict = json.loads(thresholds_dict_str)\n    model.metadata[\"\
      R2\"] = float(R2)\n    kpi.log_metric(\"R2\", float(R2))\n    deploy = threshold_check(float(R2),\
      \ int(thresholds_dict['R2']))\n    return (deploy,)\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - model_evaluation
